{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Trybe Futebol Clube API",
    "description": "Esta documentação é destinada ao projeto Trybe Futebol Clube."
  },
  "host": "trybe-fc.up.railway.app",
  "basePath": "/",
  "tags": [
    {
      "name": "Login",
      "description": "Endpoints"
    },
    {
      "name": "Team",
      "description": "Endpoints"
    },
    {
      "name": "Match",
      "description": "Endpoints"
    },
    {
      "name": "LeaderBoard",
      "description": "Endpoints"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/login": {
      "post": {
        "tags": [
          "Login"
        ],
        "summary": "Realizar o login com email e senha e em seguida gerar um token",
        "description": "Endpoint para consultar se o email e a senha fornecidos coincidem com os cadastrados no banco de dados.",
        "parameters": [
          {
            "name": "info",
            "in": "body",
            "description": "Informações necessárias para realizar o login.",
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ValidToken"
            },
            "description": "Requisição para realizar o login efetuada com sucesso!"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/BodyLoginIncompleteError"
            },
            "description": "Erro! A requisição falhou! Todos os campos devem ser preenchidos."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/InvalidLoginBodyError"
            },
            "description": "Erro! A requisição falhou! O email ou a senha informados estão incorretos."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/BodyNotFoundError"
            },
            "description": "Erro! A requisição falhou! O body com as informações necessárias não foi encontrado."
          }
        }
      }
    },
    "/login/validate": {
      "get": {
        "tags": [
          "Login"
        ],
        "summary": "Verificar qual é o tipo de usuário",
        "description": "Endpoint para verificar se o token fornecido é válido e retornar qual o tipo de usuário logado.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Token necessário para verificar qual o tipo de usuário está logado.",
            "type": "string",
            "default": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImVtYWlsIjoiYWRtaW5AYWRtaW4uY29tIiwicGFzc3dvcmQiOiJzZWNyZXRfYWRtaW4ifSwiaWF0IjoxNjc3MDI4Njg3LCJleHAiOjE3NjMzNDIyODd9.7hkBkM1PUqUZ1rmmLMqCfIryM4qWPfgT_3XFU3khFrk"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/AdminRole"
            },
            "description": "Requisição para retornar o tipo de usuário efetuada com sucesso!"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/InvalidTokenError"
            },
            "description": "Erro! A requisição falhou! O token fornecido é inválido."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/TokenNotFoundError"
            },
            "description": "Erro! A requisição falhou! O token não foi encontrado."
          }
        }
      }
    },
    "/teams": {
      "get": {
        "tags": [
          "Team"
        ],
        "summary": "Listar todos os times",
        "description": "Endpoint para listar todos os times cadastrados no banco de dados.",
        "parameters": [],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Teams"
            },
            "description": "Requisição para listar todos os times efetuada com sucesso!"
          }
        }
      }
    },
    "/teams/{id}": {
      "get": {
        "tags": [
          "Team"
        ],
        "summary": "Buscar um time pelo seu ID",
        "description": "Endpoint para buscar um time cadastrado no banco de dados pelo seu ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID necessário para buscar o time cadastrado no banco de dados."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Team"
            },
            "description": "Requisição para buscar um time pelo seu ID efetuada com sucesso!"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/IdNotFoundError"
            },
            "description": "Erro! A requisição falhou! Não foi encontrado nenhum time cadastrado no banco de dados com esse ID."
          }
        }
      }
    },
    "/matches": {
      "post": {
        "tags": [
          "Match"
        ],
        "summary": "Criar uma nova partida",
        "description": "Endpoint para cadastrar uma nova partida no banco de dados.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Token necessário para criar uma nova partida.",
            "type": "string",
            "default": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImVtYWlsIjoiYWRtaW5AYWRtaW4uY29tIiwicGFzc3dvcmQiOiJzZWNyZXRfYWRtaW4ifSwiaWF0IjoxNjc3MDI4Njg3LCJleHAiOjE3NjMzNDIyODd9.7hkBkM1PUqUZ1rmmLMqCfIryM4qWPfgT_3XFU3khFrk"
          },
          {
            "name": "info",
            "in": "body",
            "description": "Informações necessárias para criar uma nova partida.",
            "schema": {
              "$ref": "#/definitions/Match"
            }
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/Match"
            },
            "description": "Requisição para cadastrar uma nova partida efetuada com sucesso!"
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/IdNotFoundError"
            },
            "description": "Erro! A requisição falhou! O ID fornecido é inválido."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/InvalidTokenError"
            },
            "description": "Erro! A requisição falhou! O token fornecido é inválido."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/TokenNotFoundError"
            },
            "description": "Erro! A requisição falhou! O token não foi encontrado."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/EqualTeamsError"
            },
            "description": "Erro! A requisição falhou! Não é possível criar uma partida com dois times iguais."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/InvalidBodyError"
            },
            "description": "Erro! A requisição falhou! Verifique se as informações do body não estão ausentes ou incorretas."
          }
        }
      },
      "get": {
        "tags": [
          "Match"
        ],
        "summary": "Listar todas as partidas, apenas as finalizadas ou que estão em andamento",
        "description": "Endpoint para listar todos as partidas cadastradas no banco de dados, com a opção de filtrar apenas as finalizadas, ou somente as partidas em andamento.",
        "parameters": [
          {
            "name": "inProgress",
            "in": "query",
            "type": "string",
            "example": "true or false",
            "description": "Query opcional para filtrar as partidas por progresso. TRUE retorna as partidas em andamento, FALSE retorna as partidas já finalizadas."
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Matches"
            },
            "description": "Requisição para listar as partidas cadastradas no banco de dados efetuada com sucesso!"
          }
        }
      }
    },
    "/matches/{id}/finish": {
      "patch": {
        "tags": [
          "Match"
        ],
        "summary": "Atualiza o status de uma partida em andamento para finalizada",
        "description": "Endpoint para atualizar o status de uma partida cadastrada no banco de dados para finalizada.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/FinishedMessage"
            },
            "description": "Requisição para atualizar o status da partida efetuada com sucesso!"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/UpdateError"
            },
            "description": "Erro! A requisição falhou! Ocorreu um erro ao atualizar o status da partida."
          }
        }
      }
    },
    "/matches/{id}": {
      "patch": {
        "tags": [
          "Match"
        ],
        "summary": "Atualiza o placar da partida",
        "description": "Endpoint para atualizar o placar de uma partida cadastrada no banco de dados.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID necessário para buscar a partida cadastrada no banco de dados."
          },
          {
            "name": "info",
            "in": "body",
            "description": "Informações necessárias para atualizar o placar de uma partida.",
            "schema": {
              "$ref": "#/definitions/InfoUpdateMatch"
            }
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/FinishedMessage"
            },
            "description": "Requisição para atualizar o placar da partida efetuada com sucesso!"
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/UpdateError"
            },
            "description": "Erro! A requisição falhou! Ocorreu um erro ao atualizar o status da partida."
          }
        }
      }
    },
    "/leaderboard": {
      "get": {
        "tags": [
          "LeaderBoard"
        ],
        "summary": "Lista a classificação geral do campeonato",
        "description": "Endpoint para listar a classificação geral do campeonato de acordo com as partidas cadastradas no banco de dados.",
        "parameters": [],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/LeaderBoard"
            },
            "description": "Requisição para listar a classificação geral do campeonato efetuada com sucesso!"
          }
        }
      }
    },
    "/leaderboard/home": {
      "get": {
        "tags": [
          "LeaderBoard"
        ],
        "summary": "Lista a classificação dos times como mandante no campeonato",
        "description": "Endpoint para listar a classificação dos times como mandante no campeonato de acordo com as partidas cadastradas no banco de dados.",
        "parameters": [],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/LeaderBoardHome"
            },
            "description": "Requisição para listar a classificação dos times como mandante no campeonato efetuada com sucesso!"
          }
        }
      }
    },
    "/leaderboard/away": {
      "get": {
        "tags": [
          "LeaderBoard"
        ],
        "summary": "Lista a classificação dos times como visitante no campeonato",
        "description": "Endpoint para listar a classificação dos times como visitante no campeonato de acordo com as partidas cadastradas no banco de dados.",
        "parameters": [],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/LeaderBoardAway"
            },
            "description": "Requisição para listar a classificação dos times como visitante no campeonato efetuada com sucesso!"
          }
        }
      }
    }
  },
  "definitions": {
    "Login": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "admin@admin.com"
        },
        "password": {
          "type": "string",
          "example": "secret_admin"
        }
      }
    },
    "Team": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 12
        },
        "teamName": {
          "type": "string",
          "example": "Palmeiras"
        }
      }
    },
    "Teams": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          },
          "teamName": {
            "type": "string",
            "example": "Avaí/Kindermann"
          }
        }
      }
    },
    "Match": {
      "type": "object",
      "properties": {
        "homeTeam": {
          "type": "number",
          "example": 1
        },
        "awayTeam": {
          "type": "number",
          "example": 12
        },
        "homeTeamGoals": {
          "type": "number",
          "example": 1
        },
        "awayTeamGoals": {
          "type": "number",
          "example": 6
        },
        "inProgress": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "Matches": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          },
          "homeTeam": {
            "type": "number",
            "example": 16
          },
          "homeTeamGoals": {
            "type": "number",
            "example": 1
          },
          "awayTeam": {
            "type": "number",
            "example": 8
          },
          "awayTeamGoals": {
            "type": "number",
            "example": 1
          },
          "inProgress": {
            "type": "boolean",
            "example": false
          },
          "teamHome": {
            "type": "object",
            "properties": {
              "teamName": {
                "type": "string",
                "example": "São Paulo"
              }
            }
          },
          "teamAway": {
            "type": "object",
            "properties": {
              "teamName": {
                "type": "string",
                "example": "Grêmio"
              }
            }
          }
        }
      }
    },
    "LeaderBoard": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Palmeiras"
          },
          "totalPoints": {
            "type": "number",
            "example": 13
          },
          "totalGames": {
            "type": "number",
            "example": 5
          },
          "totalVictories": {
            "type": "number",
            "example": 4
          },
          "totalDraws": {
            "type": "number",
            "example": 1
          },
          "totalLosses": {
            "type": "number",
            "example": 0
          },
          "goalsFavor": {
            "type": "number",
            "example": 17
          },
          "goalsOwn": {
            "type": "number",
            "example": 5
          },
          "goalsBalance": {
            "type": "number",
            "example": 12
          },
          "efficiency": {
            "type": "string",
            "example": "86.67"
          }
        }
      }
    },
    "LeaderBoardHome": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Santos"
          },
          "totalPoints": {
            "type": "number",
            "example": 9
          },
          "totalGames": {
            "type": "number",
            "example": 3
          },
          "totalVictories": {
            "type": "number",
            "example": 3
          },
          "totalDraws": {
            "type": "number",
            "example": 0
          },
          "totalLosses": {
            "type": "number",
            "example": 0
          },
          "goalsFavor": {
            "type": "number",
            "example": 9
          },
          "goalsOwn": {
            "type": "number",
            "example": 3
          },
          "goalsBalance": {
            "type": "number",
            "example": 6
          },
          "efficiency": {
            "type": "string",
            "example": "100.00"
          }
        }
      }
    },
    "LeaderBoardAway": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Palmeiras"
          },
          "totalPoints": {
            "type": "number",
            "example": 6
          },
          "totalGames": {
            "type": "number",
            "example": 2
          },
          "totalVictories": {
            "type": "number",
            "example": 2
          },
          "totalDraws": {
            "type": "number",
            "example": 0
          },
          "totalLosses": {
            "type": "number",
            "example": 0
          },
          "goalsFavor": {
            "type": "number",
            "example": 7
          },
          "goalsOwn": {
            "type": "number",
            "example": 0
          },
          "goalsBalance": {
            "type": "number",
            "example": 7
          },
          "efficiency": {
            "type": "string",
            "example": "100.00"
          }
        }
      }
    },
    "InfoUpdateMatch": {
      "type": "object",
      "properties": {
        "homeTeamGoals": {
          "type": "number",
          "example": 2
        },
        "awayTeamGoals": {
          "type": "number",
          "example": 4
        }
      }
    },
    "ValidToken": {
      "type": "object",
      "properties": {
        "authorization": {
          "type": "string",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImVtYWlsIjoiYWRtaW5AYWRtaW4uY29tIiwicGFzc3dvcmQiOiJzZWNyZXRfYWRtaW4ifSwiaWF0IjoxNjc3MDI4Njg3LCJleHAiOjE3NjMzNDIyODd9.7hkBkM1PUqUZ1rmmLMqCfIryM4qWPfgT_3XFU3khFrk"
        }
      }
    },
    "AdminRole": {
      "type": "object",
      "properties": {
        "role": {
          "type": "string",
          "example": "admin"
        }
      }
    },
    "InvalidTokenError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Token must be a valid token"
        }
      }
    },
    "TokenNotFoundError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Token not found"
        }
      }
    },
    "InvalidLoginBodyError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Incorrect email or password"
        }
      }
    },
    "BodyLoginIncompleteError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "All fields must be filled"
        }
      }
    },
    "InvalidBodyError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Invalid body"
        }
      }
    },
    "BodyNotFoundError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Body not found"
        }
      }
    },
    "IdNotFoundError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "There is no team with such id!"
        }
      }
    },
    "EqualTeamsError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "It is not possible to create a match with two equal teams"
        }
      }
    },
    "UpdateError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Update error"
        }
      }
    },
    "FinishedMessage": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Finished"
        }
      }
    }
  }
}